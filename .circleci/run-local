#!/usr/bin/env node
const { execSync } = require('child_process');
const chalk = require('chalk');
const { GITHUB_TOKEN, NPM_TOKEN } = process.env;
const REMOTE_REGEX = /.*?[\t|\s]+git@github.com:(.*)\/(.*)\.git\s+\(.*\)/;
const minimist = require('minimist');
const { resolve } = require('path');
const args = minimist(process.argv.slice(2));

if (!args.job) {
  console.error(chalk.red('no --job flag'));
  process.exit(1);
}

const getGitInfo = () => {
  const raw = execSync(`git remote -v`)
    .toString()
    .trim();
  const rows = raw.split('\n');

  const m = rows[0].match(REMOTE_REGEX);
  console.log(m);

  if (m && m.length > 2) {
    const branch = execSync(`git rev-parse --abbrev-ref HEAD`)
      .toString()
      .trim();
    return { branch, user: m[1], repo: m[2] };
  }

  return {};
};

const info = getGitInfo();

console.log('info:', info);

const vars = {
  GITHUB_TOKEN,
  NPM_TOKEN,
  CIRCLE_PROJECT_REPONAME: info.repo,
  CIRCLE_PROJECT_USERNAME: info.user,
  CIRCLE_BRANCH: info.branch
};

const missingVars = Object.keys(vars).filter(k => !vars[k]);

if (missingVars.length > 0) {
  console.error(chalk.red(`Missing: ${missingVars.join(' ')}`));
  process.exit(1);
}

const envVarString = Object.keys(vars)
  .map(k => `-e ${k}=${vars[k]}`)
  .join(' ');
const cmd = `circleci local execute ${envVarString} --job ${args.job}`;
console.log('cmd: ', cmd);

console.log(chalk.yellow('validating config...'));
execSync('circleci config validate', { stdio: 'inherit' });

if (args.dryRun) {
  process.exit();
}
execSync(cmd, { stdio: 'inherit', cwd: resolve(__dirname, '..') });
