import React from 'react';
import { PlaceHolder, DraggableChoice, DragProvider, uid } from '@pie-lib/drag';
import { useDroppable } from '@dnd-kit/core';
import { styled } from '@mui/material/styles';
import Typography from '@mui/material/Typography';
import Divider from '@mui/material/Divider';

import withRoot from '../source/withRoot';

const { Provider: IdProvider } = uid;

const Container = styled('div')(({ isOver }) => ({
  background: isOver ? '#e8f5e8' : '#fff',
  border: '1px solid black',
  height: '500px',
  marginTop: '40px',
  width: '500px',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  fontSize: '16px',
  color: '#666',
}));

const StyledPlaceHolder = styled(PlaceHolder)(({ theme }) => ({
  marginTop: theme.spacing(1),
}));

const StyledWrapper = styled('div')(({ theme }) => ({
  backgroundColor: 'blue',
  '& .redLabel': {
    '--correct-answer-toggle-label-color': 'red',
  },
}));

// Create a functional component wrapper for the hook
const DropContainer = ({ containerVal }) => {
  const { setNodeRef, isOver } = useDroppable({
    id: 'drop-container',
  });

  return (
    <Container ref={setNodeRef} isOver={isOver}>
      {containerVal || 'Drop items here'}
    </Container>
  );
};

const Choice = ({ children }) => {
  const choiceId = uid.generateId();
  return (
    <DraggableChoice 
      choice={{ 
        id: choiceId,
        value: children
      }}
    >
      {children}
    </DraggableChoice>
  );
};

export class Wrapper extends React.Component {
  constructor(props) {
    super(props);
    this.uid = uid.generateId();
    this.state = {
      containerVal: '',
    };
    this.handleDragEnd = this.handleDragEnd.bind(this);
  }

  handleDragEnd = (event) => {
    const { active, over } = event;
    
    if (over && over.id === 'drop-container') {
      // Get the dragged content from the active item's data
      const draggedValue = active.data.current?.value;
      this.setState({
        containerVal: draggedValue || active.id,
      });
    }
  };

  render() {
    const { containerVal } = this.state;

    return (
      <IdProvider value={this.uid}>
        <DragProvider onDragEnd={this.handleDragEnd}>
          <WrapperContent containerVal={containerVal} />
        </DragProvider>
      </IdProvider>
    );
  }
}

// Separate component that contains the hook usage and is rendered inside DragProvider
class WrapperContent extends React.Component {
  render() {
    const { containerVal } = this.props;
    
    return (
      <StyledWrapper>
        <Typography variant="h6">Drag</Typography>

        <Divider />

        <PlaceHolder grid={{ columns: 3 }}>
          <Choice>foo bar</Choice>
          <Choice>
            <h1>Some Text</h1>
            <p>foo</p>
          </Choice>
          <Choice>
            <img
              width="200"
              src="http://cdn.skim.gs/images/c_fill,dpr_2.0,f_auto,fl_lossy,h_391,q_auto,w_695/fajkx3pdvvt9ax6btssg/20-of-the-cutest-small-dog-breeds-on-the-planet"
              alt="Small dog"
            />
          </Choice>
        </PlaceHolder>

        <StyledPlaceHolder isOver={true} grid={{ columns: 3 }}>
          <Choice>foo bar</Choice>
          <Choice>
            <h1>Some Text</h1>
            <p>foo</p>
          </Choice>
          <Choice>
            <img
              width="200"
              src="http://cdn.skim.gs/images/c_fill,dpr_2.0,f_auto,fl_lossy,h_391,q_auto,w_695/fajkx3pdvvt9ax6btssg/20-of-the-cutest-small-dog-breeds-on-the-planet"
              alt="Small dog"
            />
          </Choice>
        </StyledPlaceHolder>

        <StyledPlaceHolder disabled={true} grid={{ columns: 3 }}>
          <Choice>foo bar</Choice>
          <Choice>
            <h1>Some Text</h1>
            <p>foo</p>
          </Choice>
          <Choice>
            <img
              width="200"
              src="http://cdn.skim.gs/images/c_fill,dpr_2.0,f_auto,fl_lossy,h_391,q_auto,w_695/fajkx3pdvvt9ax6btssg/20-of-the-cutest-small-dog-breeds-on-the-planet"
              alt="Small dog"
            />
          </Choice>
        </StyledPlaceHolder>

        <DropContainer containerVal={containerVal} />
      </StyledWrapper>
    );
  }
}

export default withRoot(Wrapper);
